---
AWSTemplateFormatVersion: '2010-09-09'

Description: Chef Automate Deployment Template - Version 0.0.1

## PARAMETERS SECTION ##

Parameters:

  Version:
    Description: Version of the automate-demo.json file
    Type: String
    Default: 0.0.1

  # SSH keypair to inject into the instances
  KeyName:
    Description: Name of an existing ec2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  zCurrentUbuntu:
    Type: String
    Default: ami-405f7226
    Description: AMI ID for current Ubuntu - this is 16.04 LTS

  Prefix:
    Description: Tag for all servers deployed in the Automate cluster
    Type: String
    Default: my-company

  automateLicense:
    Description: base64 encoded Automate license key
    Type: String

  # Automate user parameters
  userName:
    Description: User name for all the Chef components (Chef Server, Compliance, Automate)
    Type: String
    Default: chef

  userPassword:
    Description: Password for all the Chef components (Chef Server, Compliance, Automate)
    Type: String
    Default: Ch4ng3mE

  userFullname:
    Description: Full name of the Chef components user
    Type: String

  userEmailaddress:
    Description: Email address of the Chef components user
    Type: String

  chefOrg:
    Description: The organisation to create on the Chef Server, this is the shortname
    Type: String
  
  chefOrgDescription:
    Description: Description of the Chef organisation
    Type: String

  # Automate component version
  chefDKVersion:
    Description: Chef DK version to install on the workstation
    Type: String
    Default: 1.2.22
  
  chefVersion:
    Description: Chef Server version to install
    Type: String
    Default: 12.14.0

  automateVersion:
    Description: Automate Server version to install
    Type: String
    Default: 0.7.85

  complianceVersion:
    Description: Compliance Server version to install
    Type: String
    Default: 1.8.12

  # Workstation setup
  chefRepoUrl:
    Description: URL to the chefrepo.zip file that contains the cookbooks to configure the workstation
    Type: String
    Default: https://ufmnrk9rhw1k2ftk.blob.core.windows.net/automatefiles/chefrepo.zip

  spnDetails:
    Description: Details required to create the aws config file on the workstation
    Type: String
      

## RESOURCES SECTION ##

Resources:

  # VPC creation #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/28
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name'
        Value: !Sub ${Prefix} Automate VPC

  # Subnets #
  SubnetDefault:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/28
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster Subnet

  # IGs and access and associations #
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster IG
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociationDefault:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetDefault
      RouteTableId:
        Ref: RouteTable
  
 # Network ACLs #
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster NetworkAcl

  InboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  SubnetNetworkAclAssociationDefault:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetDefault
      NetworkAclId:
        Ref: NetworkAcl

## VM CREATION ##

